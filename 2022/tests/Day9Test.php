<?php

use Alex\AdventCode2022\KnotMover;
use Alex\AdventCode2022\KnotSnakeMover;
use Alex\AdventCode2022\Model\Rope;
use Alex\AdventCode2022\Reader\KnotMotionReader;
use PHPUnit\Framework\TestCase;

class Day9Test extends TestCase
{

    public function testKnotMotionReader(): void
    {
        // GIVEN
        $inputFile = __DIR__ . '/input9.txt';

        // WHEN calling reader
        $reader = new KnotMotionReader();
        $result = $reader($inputFile);

        // THEN
        $expected = [
            ['R', 4,],
            ['U', 4,],
            ['L', 3,],
            ['D', 1,],
            ['R', 4,],
            ['D', 1,],
            ['L', 5,],
            ['R', 2,],
        ];

        $this->assertEquals($expected, $result);
    }

    public function testTailVisitedPosition()
    {
        // GIVEN
        $inputFile = __DIR__ . '/input9.txt';

        // WHEN calling reader
        $reader = new KnotMotionReader();
        $knotMoves = $reader($inputFile);

        // WHEN
        $knotMover = new KnotMover();
        $result = $knotMover($knotMoves);

        // THEN
        $this->assertEquals(13, $result);
    }

    public function testTailVisitedPosition10Knots()
    {
        // GIVEN
        $inputFile = __DIR__ . '/input9#2.txt';

        // WHEN calling reader
        $reader = new KnotMotionReader();
        $knotMoves = $reader($inputFile);

        // WHEN
        $knotMover = new KnotSnakeMover(10);
        $result = $knotMover($knotMoves);

        // THEN
        $this->assertEquals(36, $result);
    }

    public function testTailVisitedPosition10KnotsStepByStep()
    {
        // GIVEN
        $inputFile = __DIR__ . '/input9#2.txt';

        // WHEN calling reader
        $reader = new KnotMotionReader();
        $knotMoves = $reader($inputFile);

        $rope = new Rope(10, 11, 5);
        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "...........H..............",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);

        [$direction, $step] = current($knotMoves);
        $rope->move($direction, $step);

        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "...........54321H.........",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);

        next($knotMoves);
        [$direction, $step] = current($knotMoves);
        $rope->move($direction, $step);

        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "................H.........",
            "................1.........",
            "................2.........",
            "................3.........",
            "...............54.........",
            "..............6...........",
            ".............7............",
            "............8.............",
            "...........9..............",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);

        next($knotMoves);
        [$direction, $step] = current($knotMoves);
        $rope->move($direction, $step);

        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "........H1234.............",
            "............5.............",
            "............6.............",
            "............7.............",
            "............8.............",
            "............9.............",
            "..........................",
            "..........................",
            "...........s..............",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);

        next($knotMoves);
        [$direction, $step] = current($knotMoves);
        $rope->move($direction, $step);

        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            ".........2345.............",
            "........1...6.............",
            "........H...7.............",
            "............8.............",
            "............9.............",
            "..........................",
            "..........................",
            "...........s..............",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);

        next($knotMoves);
        [$direction, $step] = current($knotMoves);
        $rope->move($direction, $step);

        $displayRope = $rope->display(26, 21);
        $expected = [
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "................987654321H",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "...........s..............",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
            "..........................",
        ];
        $this->assertEquals($expected, $displayRope);
    }
}
